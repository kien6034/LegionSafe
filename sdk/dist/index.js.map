{"version":3,"sources":["../src/abis.ts","../src/LegionSafeClient.ts","../src/constants.ts","../src/utils.ts","../src/integrations/kyberswap/constants.ts","../src/integrations/kyberswap/client.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["/**\n * LegionSafe contract ABI\n */\nexport const LEGION_SAFE_ABI = [\n  {\n    type: 'constructor',\n    inputs: [\n      { name: '_owner', type: 'address' },\n      { name: '_operator', type: 'address' }\n    ],\n    stateMutability: 'nonpayable'\n  },\n  {\n    type: 'function',\n    name: 'owner',\n    inputs: [],\n    outputs: [{ name: '', type: 'address' }],\n    stateMutability: 'view'\n  },\n  {\n    type: 'function',\n    name: 'operator',\n    inputs: [],\n    outputs: [{ name: '', type: 'address' }],\n    stateMutability: 'view'\n  },\n  {\n    type: 'function',\n    name: 'setCallAuthorization',\n    inputs: [\n      { name: 'target', type: 'address' },\n      { name: 'selector', type: 'bytes4' },\n      { name: 'authorized', type: 'bool' }\n    ],\n    outputs: [],\n    stateMutability: 'nonpayable'\n  },\n  {\n    type: 'function',\n    name: 'manage',\n    inputs: [\n      { name: 'target', type: 'address' },\n      { name: 'data', type: 'bytes' },\n      { name: 'value', type: 'uint256' }\n    ],\n    outputs: [{ name: '', type: 'bytes' }],\n    stateMutability: 'nonpayable'\n  },\n  {\n    type: 'function',\n    name: 'manageBatch',\n    inputs: [\n      { name: 'targets', type: 'address[]' },\n      { name: 'data', type: 'bytes[]' },\n      { name: 'values', type: 'uint256[]' }\n    ],\n    outputs: [{ name: '', type: 'bytes[]' }],\n    stateMutability: 'nonpayable'\n  },\n  {\n    type: 'function',\n    name: 'transferOwnership',\n    inputs: [{ name: 'newOwner', type: 'address' }],\n    outputs: [],\n    stateMutability: 'nonpayable'\n  },\n  {\n    type: 'function',\n    name: 'setOperator',\n    inputs: [{ name: 'newOperator', type: 'address' }],\n    outputs: [],\n    stateMutability: 'nonpayable'\n  },\n  {\n    type: 'function',\n    name: 'withdrawETH',\n    inputs: [\n      { name: 'amount', type: 'uint256' }\n    ],\n    outputs: [],\n    stateMutability: 'nonpayable'\n  },\n  {\n    type: 'function',\n    name: 'withdrawAllETH',\n    inputs: [],\n    outputs: [],\n    stateMutability: 'nonpayable'\n  },\n  {\n    type: 'function',\n    name: 'withdrawERC20',\n    inputs: [\n      { name: 'token', type: 'address' },\n      { name: 'amount', type: 'uint256' }\n    ],\n    outputs: [],\n    stateMutability: 'nonpayable'\n  },\n  {\n    type: 'function',\n    name: 'withdrawAllERC20',\n    inputs: [\n      { name: 'token', type: 'address' }\n    ],\n    outputs: [],\n    stateMutability: 'nonpayable'\n  },\n  {\n    type: 'function',\n    name: 'getETHBalance',\n    inputs: [],\n    outputs: [{ name: '', type: 'uint256' }],\n    stateMutability: 'view'\n  },\n  {\n    type: 'function',\n    name: 'getTokenBalance',\n    inputs: [{ name: 'token', type: 'address' }],\n    outputs: [{ name: '', type: 'uint256' }],\n    stateMutability: 'view'\n  },\n  {\n    type: 'function',\n    name: 'authorizedCalls',\n    inputs: [\n      { name: 'target', type: 'address' },\n      { name: 'selector', type: 'bytes4' }\n    ],\n    outputs: [{ name: '', type: 'bool' }],\n    stateMutability: 'view'\n  },\n  {\n    type: 'function',\n    name: 'setSpenderWhitelist',\n    inputs: [\n      { name: 'spender', type: 'address' },\n      { name: 'whitelisted', type: 'bool' }\n    ],\n    outputs: [],\n    stateMutability: 'nonpayable'\n  },\n  {\n    type: 'function',\n    name: 'whitelistedSpenders',\n    inputs: [{ name: 'spender', type: 'address' }],\n    outputs: [{ name: '', type: 'bool' }],\n    stateMutability: 'view'\n  },\n  {\n    type: 'function',\n    name: 'addTrackedToken',\n    inputs: [{ name: 'token', type: 'address' }],\n    outputs: [],\n    stateMutability: 'nonpayable'\n  },\n  {\n    type: 'function',\n    name: 'removeTrackedToken',\n    inputs: [{ name: 'token', type: 'address' }],\n    outputs: [],\n    stateMutability: 'nonpayable'\n  },\n  {\n    type: 'function',\n    name: 'getTrackedTokens',\n    inputs: [],\n    outputs: [{ name: '', type: 'address[]' }],\n    stateMutability: 'view'\n  },\n  {\n    type: 'function',\n    name: 'setSpendingLimit',\n    inputs: [\n      { name: 'token', type: 'address' },\n      { name: 'limitPerWindow', type: 'uint256' },\n      { name: 'windowDuration', type: 'uint256' }\n    ],\n    outputs: [],\n    stateMutability: 'nonpayable'\n  },\n  {\n    type: 'function',\n    name: 'getRemainingLimit',\n    inputs: [{ name: 'token', type: 'address' }],\n    outputs: [\n      { name: 'remaining', type: 'uint256' },\n      { name: 'windowEndsAt', type: 'uint256' }\n    ],\n    stateMutability: 'view'\n  },\n  {\n    type: 'function',\n    name: 'spendingLimits',\n    inputs: [{ name: 'token', type: 'address' }],\n    outputs: [\n      { name: 'limitPerWindow', type: 'uint256' },\n      { name: 'windowDuration', type: 'uint256' },\n      { name: 'spent', type: 'uint256' },\n      { name: 'lastWindowStart', type: 'uint256' }\n    ],\n    stateMutability: 'view'\n  },\n  {\n    type: 'event',\n    name: 'CallAuthorized',\n    inputs: [\n      { name: 'target', type: 'address', indexed: true },\n      { name: 'selector', type: 'bytes4', indexed: true },\n      { name: 'authorized', type: 'bool', indexed: false }\n    ]\n  },\n  {\n    type: 'event',\n    name: 'Managed',\n    inputs: [\n      { name: 'target', type: 'address', indexed: true },\n      { name: 'data', type: 'bytes', indexed: false },\n      { name: 'value', type: 'uint256', indexed: false }\n    ]\n  },\n  {\n    type: 'event',\n    name: 'ManagedBatch',\n    inputs: [\n      { name: 'targets', type: 'address[]', indexed: false },\n      { name: 'data', type: 'bytes[]', indexed: false },\n      { name: 'values', type: 'uint256[]', indexed: false }\n    ]\n  },\n  {\n    type: 'receive',\n    stateMutability: 'payable'\n  }\n] as const;\n\n/**\n * ERC20 token ABI (minimal)\n */\nexport const ERC20_ABI = [\n  {\n    type: 'function',\n    name: 'balanceOf',\n    inputs: [{ name: 'account', type: 'address' }],\n    outputs: [{ name: '', type: 'uint256' }],\n    stateMutability: 'view'\n  },\n  {\n    type: 'function',\n    name: 'decimals',\n    inputs: [],\n    outputs: [{ name: '', type: 'uint8' }],\n    stateMutability: 'view'\n  },\n  {\n    type: 'function',\n    name: 'symbol',\n    inputs: [],\n    outputs: [{ name: '', type: 'string' }],\n    stateMutability: 'view'\n  },\n  {\n    type: 'function',\n    name: 'approve',\n    inputs: [\n      { name: 'spender', type: 'address' },\n      { name: 'amount', type: 'uint256' }\n    ],\n    outputs: [{ name: '', type: 'bool' }],\n    stateMutability: 'nonpayable'\n  },\n  {\n    type: 'function',\n    name: 'transfer',\n    inputs: [\n      { name: 'to', type: 'address' },\n      { name: 'amount', type: 'uint256' }\n    ],\n    outputs: [{ name: '', type: 'bool' }],\n    stateMutability: 'nonpayable'\n  }\n] as const;\n","import { Address, Hash, formatUnits } from 'viem';\nimport { LEGION_SAFE_ABI, ERC20_ABI } from './abis.js';\nimport type {\n  LegionSafeConfig,\n  AuthorizeCallParams,\n  ManageCallParams,\n  ManageBatchParams,\n  WithdrawETHParams,\n  WithdrawERC20Params,\n  TransactionResult,\n  BalanceInfo,\n  SetSpenderWhitelistParams,\n  SetSpendingLimitParams,\n  SpendingLimitInfo,\n} from './types.js';\n\n/**\n * Main SDK client for interacting with LegionSafe contracts\n */\nexport class LegionSafeClient {\n  public readonly safeAddress: Address;\n  private readonly walletClient;\n  private readonly publicClient;\n\n  constructor(config: LegionSafeConfig) {\n    this.safeAddress = config.safeAddress;\n    this.walletClient = config.walletClient;\n    this.publicClient = config.publicClient;\n  }\n\n  /**\n   * Get the current account address\n   */\n  private getAccount() {\n    if (!this.walletClient.account) {\n      throw new Error('Wallet client must have an account');\n    }\n    return this.walletClient.account;\n  }\n\n  /**\n   * Wait for transaction and return result\n   */\n  private async waitForTransaction(hash: Hash): Promise<TransactionResult> {\n    const receipt = await this.publicClient.waitForTransactionReceipt({ hash });\n\n    return {\n      hash,\n      blockNumber: receipt.blockNumber,\n      gasUsed: receipt.gasUsed,\n      status: receipt.status,\n    };\n  }\n\n  /**\n   * Authorize or revoke a function call\n   *\n   * @param params Authorization parameters\n   * @returns Transaction result\n   *\n   * @example\n   * ```typescript\n   * await client.authorizeCall({\n   *   target: '0xRouterAddress',\n   *   selector: '0x12345678',\n   *   authorized: true,\n   * });\n   * ```\n   */\n  async authorizeCall(params: AuthorizeCallParams): Promise<TransactionResult> {\n    const hash = await this.walletClient.writeContract({\n      address: this.safeAddress,\n      abi: LEGION_SAFE_ABI,\n      functionName: 'setCallAuthorization',\n      args: [params.target, params.selector, params.authorized],\n      account: this.getAccount(),\n      chain: this.walletClient.chain,\n    });\n\n    return this.waitForTransaction(hash);\n  }\n\n  /**\n   * Check if a function call is authorized\n   *\n   * @param target Target contract address\n   * @param selector 4-byte function selector\n   * @returns Whether the call is authorized\n   */\n  async isCallAuthorized(\n    target: Address,\n    selector: `0x${string}`\n  ): Promise<boolean> {\n    return this.publicClient.readContract({\n      address: this.safeAddress,\n      abi: LEGION_SAFE_ABI,\n      functionName: 'authorizedCalls',\n      args: [target, selector],\n    });\n  }\n\n  /**\n   * Execute an arbitrary call through the vault's manage() function\n   *\n   * @param params Manage call parameters\n   * @returns Transaction result with returned data\n   *\n   * @example\n   * ```typescript\n   * // Execute a DEX swap\n   * await client.manage({\n   *   target: '0xRouterAddress',\n   *   data: '0x...',  // encoded swap calldata\n   *   value: parseEther('0.1'),  // 0.1 native token\n   * });\n   * ```\n   */\n  async manage(params: ManageCallParams): Promise<TransactionResult & { returnData: `0x${string}` }> {\n    const hash = await this.walletClient.writeContract({\n      address: this.safeAddress,\n      abi: LEGION_SAFE_ABI,\n      functionName: 'manage',\n      args: [params.target, params.data, params.value],\n      account: this.getAccount(),\n      chain: this.walletClient.chain,\n    });\n\n    const result = await this.waitForTransaction(hash);\n\n    return {\n      ...result,\n      returnData: '0x', // Return data is available in logs\n    };\n  }\n\n  /**\n   * Execute multiple calls atomically through the vault's manageBatch() function\n   *\n   * @param params Batch call parameters\n   * @returns Transaction result with array of returned data\n   *\n   * @example\n   * ```typescript\n   * await client.manageBatch({\n   *   calls: [\n   *     { target: tokenAddress, data: approveCalldata, value: 0n },\n   *     { target: routerAddress, data: swapCalldata, value: parseEther('0.1') }\n   *   ]\n   * });\n   * ```\n   */\n  async manageBatch(params: ManageBatchParams): Promise<TransactionResult & { returnData: `0x${string}`[] }> {\n    // Transform object array into separate arrays for contract call\n    const targets = params.calls.map(call => call.target);\n    const data = params.calls.map(call => call.data);\n    const values = params.calls.map(call => call.value);\n\n    const hash = await this.walletClient.writeContract({\n      address: this.safeAddress,\n      abi: LEGION_SAFE_ABI,\n      functionName: 'manageBatch',\n      args: [targets, data, values],\n      account: this.getAccount(),\n      chain: this.walletClient.chain,\n    });\n\n    const result = await this.waitForTransaction(hash);\n\n    return {\n      ...result,\n      returnData: [], // Return data available in logs\n    };\n  }\n\n  /**\n   * Withdraw ETH from the vault to the owner (owner only)\n   *\n   * @param params Withdrawal parameters\n   * @returns Transaction result\n   */\n  async withdrawETH(params: WithdrawETHParams): Promise<TransactionResult> {\n    const hash = await this.walletClient.writeContract({\n      address: this.safeAddress,\n      abi: LEGION_SAFE_ABI,\n      functionName: 'withdrawETH',\n      args: [params.amount],\n      account: this.getAccount(),\n      chain: this.walletClient.chain,\n    });\n\n    return this.waitForTransaction(hash);\n  }\n\n  /**\n   * Withdraw all ETH from the vault to the owner (owner only)\n   *\n   * @returns Transaction result\n   */\n  async withdrawAllETH(): Promise<TransactionResult> {\n    const hash = await this.walletClient.writeContract({\n      address: this.safeAddress,\n      abi: LEGION_SAFE_ABI,\n      functionName: 'withdrawAllETH',\n      args: [],\n      account: this.getAccount(),\n      chain: this.walletClient.chain,\n    });\n\n    return this.waitForTransaction(hash);\n  }\n\n  /**\n   * Withdraw ERC20 tokens from the vault to the owner (owner only)\n   *\n   * @param params Withdrawal parameters\n   * @returns Transaction result\n   */\n  async withdrawERC20(params: WithdrawERC20Params): Promise<TransactionResult> {\n    const hash = await this.walletClient.writeContract({\n      address: this.safeAddress,\n      abi: LEGION_SAFE_ABI,\n      functionName: 'withdrawERC20',\n      args: [params.token, params.amount],\n      account: this.getAccount(),\n      chain: this.walletClient.chain,\n    });\n\n    return this.waitForTransaction(hash);\n  }\n\n  /**\n   * Withdraw all ERC20 tokens from the vault to the owner (owner only)\n   *\n   * @param token Token address\n   * @returns Transaction result\n   */\n  async withdrawAllERC20(token: Address): Promise<TransactionResult> {\n    const hash = await this.walletClient.writeContract({\n      address: this.safeAddress,\n      abi: LEGION_SAFE_ABI,\n      functionName: 'withdrawAllERC20',\n      args: [token],\n      account: this.getAccount(),\n      chain: this.walletClient.chain,\n    });\n\n    return this.waitForTransaction(hash);\n  }\n\n  /**\n   * Get the vault's native token balance\n   *\n   * @returns Balance information\n   */\n  async getETHBalance(): Promise<BalanceInfo> {\n    const balance = await this.publicClient.readContract({\n      address: this.safeAddress,\n      abi: LEGION_SAFE_ABI,\n      functionName: 'getETHBalance',\n    });\n\n    return {\n      raw: balance,\n      formatted: formatUnits(balance, 18),\n      decimals: 18,\n    };\n  }\n\n  /**\n   * Get the vault's ERC20 token balance\n   *\n   * @param token Token address\n   * @returns Balance information with symbol\n   */\n  async getTokenBalance(token: Address): Promise<BalanceInfo> {\n    const [balance, decimals, symbol] = await Promise.all([\n      this.publicClient.readContract({\n        address: this.safeAddress,\n        abi: LEGION_SAFE_ABI,\n        functionName: 'getTokenBalance',\n        args: [token],\n      }),\n      this.publicClient.readContract({\n        address: token,\n        abi: ERC20_ABI,\n        functionName: 'decimals',\n      }),\n      this.publicClient.readContract({\n        address: token,\n        abi: ERC20_ABI,\n        functionName: 'symbol',\n      }),\n    ]);\n\n    return {\n      raw: balance,\n      formatted: formatUnits(balance, decimals),\n      decimals,\n      symbol,\n    };\n  }\n\n  /**\n   * Get the vault's owner address\n   */\n  async getOwner(): Promise<Address> {\n    return this.publicClient.readContract({\n      address: this.safeAddress,\n      abi: LEGION_SAFE_ABI,\n      functionName: 'owner',\n    });\n  }\n\n  /**\n   * Get the vault's operator address\n   */\n  async getOperator(): Promise<Address> {\n    return this.publicClient.readContract({\n      address: this.safeAddress,\n      abi: LEGION_SAFE_ABI,\n      functionName: 'operator',\n    });\n  }\n\n  /**\n   * Transfer ownership to a new address (owner only)\n   *\n   * @param newOwner New owner address\n   * @returns Transaction result\n   */\n  async transferOwnership(newOwner: Address): Promise<TransactionResult> {\n    const hash = await this.walletClient.writeContract({\n      address: this.safeAddress,\n      abi: LEGION_SAFE_ABI,\n      functionName: 'transferOwnership',\n      args: [newOwner],\n      account: this.getAccount(),\n      chain: this.walletClient.chain,\n    });\n\n    return this.waitForTransaction(hash);\n  }\n\n  /**\n   * Set a new operator address (owner only)\n   *\n   * @param newOperator New operator address\n   * @returns Transaction result\n   */\n  async setOperator(newOperator: Address): Promise<TransactionResult> {\n    const hash = await this.walletClient.writeContract({\n      address: this.safeAddress,\n      abi: LEGION_SAFE_ABI,\n      functionName: 'setOperator',\n      args: [newOperator],\n      account: this.getAccount(),\n      chain: this.walletClient.chain,\n    });\n\n    return this.waitForTransaction(hash);\n  }\n\n  // ============================================\n  // Spending Limit & Whitelist Methods\n  // ============================================\n\n  /**\n   * Whitelist or remove a spender address for ERC20 approve operations (owner only)\n   *\n   * @param params Whitelist parameters\n   * @returns Transaction result\n   *\n   * @example\n   * ```typescript\n   * await client.setSpenderWhitelist({\n   *   spender: '0xRouterAddress',\n   *   whitelisted: true,\n   * });\n   * ```\n   */\n  async setSpenderWhitelist(params: SetSpenderWhitelistParams): Promise<TransactionResult> {\n    const hash = await this.walletClient.writeContract({\n      address: this.safeAddress,\n      abi: LEGION_SAFE_ABI,\n      functionName: 'setSpenderWhitelist',\n      args: [params.spender, params.whitelisted],\n      account: this.getAccount(),\n      chain: this.walletClient.chain,\n    });\n\n    return this.waitForTransaction(hash);\n  }\n\n  /**\n   * Check if a spender is whitelisted\n   *\n   * @param spender Spender address\n   * @returns Whether the spender is whitelisted\n   */\n  async isSpenderWhitelisted(spender: Address): Promise<boolean> {\n    return this.publicClient.readContract({\n      address: this.safeAddress,\n      abi: LEGION_SAFE_ABI,\n      functionName: 'whitelistedSpenders',\n      args: [spender],\n    });\n  }\n\n  /**\n   * Add a token to the spending tracking list (owner only)\n   *\n   * @param token Token address (use 0x0 for native token)\n   * @returns Transaction result\n   */\n  async addTrackedToken(token: Address): Promise<TransactionResult> {\n    const hash = await this.walletClient.writeContract({\n      address: this.safeAddress,\n      abi: LEGION_SAFE_ABI,\n      functionName: 'addTrackedToken',\n      args: [token],\n      account: this.getAccount(),\n      chain: this.walletClient.chain,\n    });\n\n    return this.waitForTransaction(hash);\n  }\n\n  /**\n   * Remove a token from the spending tracking list (owner only)\n   *\n   * @param token Token address to remove\n   * @returns Transaction result\n   */\n  async removeTrackedToken(token: Address): Promise<TransactionResult> {\n    const hash = await this.walletClient.writeContract({\n      address: this.safeAddress,\n      abi: LEGION_SAFE_ABI,\n      functionName: 'removeTrackedToken',\n      args: [token],\n      account: this.getAccount(),\n      chain: this.walletClient.chain,\n    });\n\n    return this.waitForTransaction(hash);\n  }\n\n  /**\n   * Get the list of tracked tokens\n   *\n   * @returns Array of tracked token addresses\n   */\n  async getTrackedTokens(): Promise<Address[]> {\n    return this.publicClient.readContract({\n      address: this.safeAddress,\n      abi: LEGION_SAFE_ABI,\n      functionName: 'getTrackedTokens',\n    }) as Promise<Address[]>;\n  }\n\n  /**\n   * Set spending limit for a token (owner only)\n   *\n   * @param params Spending limit parameters\n   * @returns Transaction result\n   *\n   * @example\n   * ```typescript\n   * // Set 100 USDC per 6 hours (default window)\n   * await client.setSpendingLimit({\n   *   token: '0xUSDC_ADDRESS',\n   *   limitPerWindow: 100_000000n, // 100 USDC (6 decimals)\n   * });\n   *\n   * // Set 1 ETH per 1 hour (custom window)\n   * await client.setSpendingLimit({\n   *   token: '0x0000000000000000000000000000000000000000',\n   *   limitPerWindow: parseEther('1'),\n   *   windowDuration: 3600n, // 1 hour in seconds\n   * });\n   * ```\n   */\n  async setSpendingLimit(params: SetSpendingLimitParams): Promise<TransactionResult> {\n    const hash = await this.walletClient.writeContract({\n      address: this.safeAddress,\n      abi: LEGION_SAFE_ABI,\n      functionName: 'setSpendingLimit',\n      args: [params.token, params.limitPerWindow, params.windowDuration || 0n],\n      account: this.getAccount(),\n      chain: this.walletClient.chain,\n    });\n\n    return this.waitForTransaction(hash);\n  }\n\n  /**\n   * Get spending limit information for a token\n   *\n   * @param token Token address\n   * @returns Spending limit info including remaining amount and window end time\n   *\n   * @example\n   * ```typescript\n   * const info = await client.getSpendingLimitInfo('0xUSDC_ADDRESS');\n   * console.log(`Remaining: ${formatUnits(info.remaining, 6)} USDC`);\n   * console.log(`Window ends at: ${new Date(Number(info.windowEndsAt) * 1000)}`);\n   * ```\n   */\n  async getSpendingLimitInfo(token: Address): Promise<SpendingLimitInfo> {\n    const [limitData, remainingData] = await Promise.all([\n      this.publicClient.readContract({\n        address: this.safeAddress,\n        abi: LEGION_SAFE_ABI,\n        functionName: 'spendingLimits',\n        args: [token],\n      }) as Promise<[bigint, bigint, bigint, bigint]>,\n      this.publicClient.readContract({\n        address: this.safeAddress,\n        abi: LEGION_SAFE_ABI,\n        functionName: 'getRemainingLimit',\n        args: [token],\n      }) as Promise<[bigint, bigint]>,\n    ]);\n\n    const [limitPerWindow, windowDuration, spent, lastWindowStart] = limitData;\n    const [remaining, windowEndsAt] = remainingData;\n\n    return {\n      limitPerWindow,\n      windowDuration,\n      spent,\n      lastWindowStart,\n      remaining,\n      windowEndsAt,\n    };\n  }\n}\n","import { Address } from 'viem';\n\n/**\n * Common chain IDs\n */\nexport const CHAIN_IDS = {\n  ETHEREUM: 1,\n  BSC: 56,\n  POLYGON: 137,\n  ARBITRUM: 42161,\n  BASE: 8453,\n} as const;\n\n/**\n * Native token addresses (used by some DEX aggregators)\n */\nexport const NATIVE_TOKEN_ADDRESS = '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE' as Address;\n\n/**\n * Zero address\n */\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000' as Address;\n","import { Address, keccak256, toBytes } from 'viem';\n\n/**\n * Extract 4-byte function selector from calldata or function signature\n *\n * @param input Calldata (0x...) or function signature (\"transfer(address,uint256)\")\n * @returns 4-byte selector\n *\n * @example\n * ```typescript\n * getFunctionSelector('0x12345678...')  // '0x12345678'\n * getFunctionSelector('transfer(address,uint256)')  // '0xa9059cbb'\n * ```\n */\nexport function getFunctionSelector(input: string): `0x${string}` {\n  if (input.startsWith('0x')) {\n    // Already calldata - extract first 4 bytes\n    return input.slice(0, 10) as `0x${string}`;\n  }\n\n  // Function signature - hash and extract first 4 bytes\n  const hash = keccak256(toBytes(input));\n  return hash.slice(0, 10) as `0x${string}`;\n}\n\n/**\n * Check if an address is the zero address\n */\nexport function isZeroAddress(address: Address): boolean {\n  return address === '0x0000000000000000000000000000000000000000';\n}\n\n/**\n * Validate that a value is a valid address\n */\nexport function isValidAddress(value: string): value is Address {\n  return /^0x[a-fA-F0-9]{40}$/.test(value);\n}\n\n/**\n * Format a transaction hash for display with ellipsis\n */\nexport function formatHash(hash: string, startChars = 6, endChars = 4): string {\n  if (hash.length < startChars + endChars + 2) return hash;\n  return `${hash.slice(0, startChars + 2)}...${hash.slice(-endChars)}`;\n}\n","import { Address } from 'viem';\n\n/**\n * KyberSwap API endpoints by chain\n */\nexport const KYBERSWAP_API_BASE = 'https://aggregator-api.kyberswap.com';\n\n/**\n * KyberSwap chain names\n */\nexport const KYBERSWAP_CHAIN_NAMES: Record<number, string> = {\n  1: 'ethereum',\n  56: 'bsc',\n  137: 'polygon',\n  42161: 'arbitrum',\n  8453: 'base',\n};\n\n/**\n * KyberSwap router addresses by chain\n */\nexport const KYBERSWAP_ROUTERS: Record<number, Address> = {\n  1: '0x6131B5fae19EA4f9D964eAc0408E4408b66337b5',\n  56: '0x6131B5fae19EA4f9D964eAc0408E4408b66337b5',\n  137: '0x6131B5fae19EA4f9D964eAc0408E4408b66337b5',\n  42161: '0x6131B5fae19EA4f9D964eAc0408E4408b66337b5',\n  8453: '0x6131B5fae19EA4f9D964eAc0408E4408b66337b5',\n};\n\n/**\n * Common function selectors for KyberSwap\n */\nexport const KYBERSWAP_SELECTORS = {\n  SWAP_SIMPLE_MODE: '0x8af033fb',\n  SWAP: '0x59e50fed',\n  META_AGGREGATION: '0xe21fd0e9',\n} as const;\n","import { Address } from 'viem';\nimport {\n  KyberSwapRoute,\n  KyberSwapBuildRouteRequest,\n  KyberSwapBuildRouteResponse,\n  KyberSwapParams,\n} from './types.js';\nimport {\n  KYBERSWAP_API_BASE,\n  KYBERSWAP_CHAIN_NAMES,\n  KYBERSWAP_ROUTERS,\n} from './constants.js';\n\n/**\n * Client for interacting with KyberSwap Aggregator API\n */\nexport class KyberSwapClient {\n  private apiBase: string;\n  private chainName: string;\n  public readonly routerAddress: Address;\n\n  constructor(chainId: number) {\n    this.apiBase = KYBERSWAP_API_BASE;\n\n    const chainName = KYBERSWAP_CHAIN_NAMES[chainId];\n    if (!chainName) {\n      throw new Error(`Unsupported chain ID: ${chainId}`);\n    }\n    this.chainName = chainName;\n\n    const routerAddress = KYBERSWAP_ROUTERS[chainId];\n    if (!routerAddress) {\n      throw new Error(`No KyberSwap router for chain ID: ${chainId}`);\n    }\n    this.routerAddress = routerAddress;\n  }\n\n  /**\n   * Get the best swap route from KyberSwap\n   */\n  async getRoute(\n    tokenIn: Address,\n    tokenOut: Address,\n    amountIn: string\n  ): Promise<KyberSwapRoute> {\n    const url = `${this.apiBase}/${this.chainName}/api/v1/routes?tokenIn=${tokenIn}&tokenOut=${tokenOut}&amountIn=${amountIn}`;\n\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (!response.ok) {\n      const error = await response.text();\n      throw new Error(`KyberSwap API error: ${response.status} - ${error}`);\n    }\n\n    const data = await response.json() as { data: KyberSwapRoute };\n    return data.data;\n  }\n\n  /**\n   * Build swap transaction calldata\n   */\n  async buildSwap(\n    route: KyberSwapRoute,\n    sender: Address,\n    recipient: Address,\n    slippageTolerance: number = 50\n  ): Promise<KyberSwapBuildRouteResponse> {\n    const url = `${this.apiBase}/${this.chainName}/api/v1/route/build`;\n\n    const buildRequest: KyberSwapBuildRouteRequest = {\n      routeSummary: route.routeSummary,\n      sender,\n      recipient,\n      slippageTolerance,\n    };\n\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(buildRequest),\n    });\n\n    if (!response.ok) {\n      const error = await response.text();\n      throw new Error(`KyberSwap build API error: ${response.status} - ${error}`);\n    }\n\n    const data = await response.json() as { data: KyberSwapBuildRouteResponse };\n    return data.data;\n  }\n\n  /**\n   * Get swap calldata in one call (combines getRoute + buildSwap)\n   */\n  async getSwapCalldata(params: KyberSwapParams): Promise<{\n    calldata: `0x${string}`;\n    amountOut: string;\n    routerAddress: Address;\n  }> {\n    const route = await this.getRoute(\n      params.tokenIn,\n      params.tokenOut,\n      params.amountIn\n    );\n\n    const txData = await this.buildSwap(\n      route,\n      params.sender,\n      params.recipient,\n      params.slippageTolerance ?? 50\n    );\n\n    return {\n      calldata: txData.data as `0x${string}`,\n      amountOut: txData.amountOut,\n      routerAddress: this.routerAddress,\n    };\n  }\n}\n"]}